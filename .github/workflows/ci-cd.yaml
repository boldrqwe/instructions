name: CI/CD Pipeline

on:
  push:
    branches: [ main, work ]
  pull_request:

# 1) Даем право пушить в GHCR
permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  # 2) Явно задаем lowercase target для backend-образа
  IMAGE_BACKEND: ghcr.io/${{ github.repository_owner }}/instructions-backend
  K8S_NAMESPACE: apps
  DEPLOYMENT_NAME: my-service

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 25
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '25'
          cache: maven

      # 3) На всякий случай "пришиваем" toolchains под текущий JAVA_HOME,
      # чтобы Maven всегда компилировал именно JDK 25
      - name: Configure Maven toolchains (force JDK 25)
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/toolchains.xml << 'EOF'
          <toolchains>
            <toolchain>
              <type>jdk</type>
              <provides>
                <version>25</version>
                <vendor>any</vendor>
              </provides>
              <configuration>
                <jdkHome>${JAVA_HOME}</jdkHome>
              </configuration>
            </toolchain>
          </toolchains>
          EOF

      - name: Show Java/Maven
        run: |
          echo "JAVA_HOME=$JAVA_HOME"
          java -version
          mvn -v

      - name: Build and test with Maven
        working-directory: backend
        run: mvn -B verify

      - name: Log in to GHCR
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 4) Генерим теги для backend-образа (latest + sha + branch)
      - name: Extract Docker metadata (backend)
        id: meta
        if: github.event_name == 'push'
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_BACKEND }}
          tags: |
            type=raw,value=${{ github.sha }}
            type=ref,event=branch
          flavor: |
            latest=true

      - name: Build and push backend image
        if: github.event_name == 'push'
        uses: docker/build-push-action@v5
        with:
          context: backend
          file: backend/Dockerfile
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies for templating
        run: sudo apt-get update && sudo apt-get install -y gettext-base

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.29.2'

      # 5) Отдаем в шаблоны точный тег образа (по SHA)
      - name: Render Kubernetes manifests
        env:
          IMAGE: ${{ env.IMAGE_BACKEND }}:${{ github.sha }}
        run: |
          envsubst < k8s/deployment.yaml.tpl > k8s/deployment.yaml
          envsubst < k8s/service.yaml.tpl > k8s/service.yaml
          echo "::group::Rendered deployment"
          cat k8s/deployment.yaml
          echo "::endgroup::"
          echo "::group::Rendered service"
          cat k8s/service.yaml
          echo "::endgroup::"

      - name: Create namespace if missing
        run: |
          kubectl create namespace ${{ env.K8S_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -n ${{ env.K8S_NAMESPACE }} -f k8s/deployment.yaml
          kubectl apply -n ${{ env.K8S_NAMESPACE }} -f k8s/service.yaml

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }}
