name: Backend CI/CD

on:
  push:
    branches:
      - main
      - work
  pull_request:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/instructions-backend
  K8S_NAMESPACE: apps
  DEPLOYMENT_NAME: my-service

jobs:
  build:
    name: Test backend and publish container image
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.image-tag.outputs.value }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Устанавливаем стабильный Temurin JDK 21 и подключаем кэш Maven.
      - name: Set up Temurin JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      # Показываем версии инструментов, чтобы диагностика была прозрачной.
      - name: Show Java and Maven versions
        run: |
          java -version
          mvn -version

      # Гоним юнит-тесты и проверяем, что код собирается на чистом агенте.
      - name: Run Maven verify
        working-directory: backend
        run: mvn -B -Dspring.profiles.active=test verify

      # Если тесты упали, отчёты будут приложены к джобе.
      - name: Upload Surefire reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-surefire-reports
          path: backend/target/surefire-reports
          if-no-files-found: ignore

      # Авторизация в GitHub Container Registry нужна только когда пушим в main.
      - name: Log in to GitHub Container Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Собираем Docker-образ. На PR просто проверяем, что сборка проходит, а на main ещё и пушим.
      - name: Build backend image
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: backend
          file: backend/Dockerfile
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: |
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Передаём тег образа в следующую джобу, чтобы не вычислять его повторно.
      - name: Expose image tag for deploy job
        id: image-tag
        run: echo "value=${{ env.IMAGE_NAME }}:${{ github.sha }}" >> "$GITHUB_OUTPUT"

  deploy:
    name: Apply Kubernetes manifests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    env:
      IMAGE_TO_DEPLOY: ${{ needs.build.outputs['image-tag'] }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Ставим kubectl подходящей версии.
      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.29.2'

      # Пробрасываем kubeconfig из секретов GitHub.
      - name: Configure kubeconfig
        run: |
          mkdir -p "$HOME/.kube"
          echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > "$HOME/.kube/config"
          chmod 600 "$HOME/.kube/config"

      # envsubst из пакета gettext нужен для шаблонов манифестов.
      - name: Install envsubst tool
        run: sudo apt-get update && sudo apt-get install -y gettext-base

      # Рендерим манифесты, подставляя свежий тег образа.
      - name: Render Kubernetes manifests
        env:
          IMAGE: ${{ env.IMAGE_TO_DEPLOY }}
        run: |
          envsubst < k8s/deployment.yaml.tpl > k8s/deployment.yaml
          envsubst < k8s/service.yaml.tpl > k8s/service.yaml
          echo "::group::Rendered deployment" && cat k8s/deployment.yaml && echo "::endgroup::"
          echo "::group::Rendered service" && cat k8s/service.yaml && echo "::endgroup::"

      # Простая защита от отсутствующего namespace.
      - name: Ensure namespace exists
        run: |
          kubectl create namespace ${{ env.K8S_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      # Применяем манифесты.
      - name: Apply manifests
        run: |
          kubectl apply -n ${{ env.K8S_NAMESPACE }} -f k8s/deployment.yaml
          kubectl apply -n ${{ env.K8S_NAMESPACE }} -f k8s/service.yaml

      # И ждём, пока развёртывание обновится.
      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }}
